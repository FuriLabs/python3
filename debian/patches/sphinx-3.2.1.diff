--- a/Doc/reference/lexical_analysis.rst
+++ b/Doc/reference/lexical_analysis.rst
@@ -661,12 +661,12 @@ for the contents of the string is:
 
 .. productionlist::
    f_string: (`literal_char` | "{{" | "}}" | `replacement_field`)*
-   replacement_field: "{" `f_expression` ["="] ["!" `conversion`] [":" `format_spec`] "}"
+   replacement_field: "{" `f_expression` ["="] ["!" `conversion`] [":" `fmt_spec`] "}"
    f_expression: (`conditional_expression` | "*" `or_expr`)
                :   ("," `conditional_expression` | "," "*" `or_expr`)* [","]
                : | `yield_expression`
    conversion: "s" | "r" | "a"
-   format_spec: (`literal_char` | NULL | `replacement_field`)*
+   fmt_spec: (`literal_char` | NULL | `replacement_field`)*
    literal_char: <any code point except "{", "}" or NULL>
 
 The parts of the string outside curly braces are treated literally,
--- a/Doc/library/string.rst
+++ b/Doc/library/string.rst
@@ -309,10 +309,10 @@ non-empty format specification typically
 The general form of a *standard format specifier* is:
 
 .. productionlist::
-   format_spec: [[`fill`]`align`][`sign`][#][0][`width`][`grouping_option`][.`precision`][`type`]
+   format_spec: [[`fill`]`align`][`sign_`][#][0][`width`][`grouping_option`][.`precision`][`type`]
    fill: <any character>
    align: "<" | ">" | "=" | "^"
-   sign: "+" | "-" | " "
+   sign_: "+" | "-" | " "
    width: `digit`+
    grouping_option: "_" | ","
    precision: `digit`+
--- a/Doc/conf.py
+++ b/Doc/conf.py
@@ -61,6 +61,10 @@ smartquotes_excludes = {
 # Avoid a warning with Sphinx >= 2.0
 master_doc = 'contents'
 
+# Allow to build with Sphinx >= 3.2
+c_allow_pre_v3 = True
+c_warn_on_allowed_pre_v3 = False
+
 # Options for HTML output
 # -----------------------
 
